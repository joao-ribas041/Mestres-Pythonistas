Olá :), sou uma frase simples

dev123com
developer 123
dev = 123
dev = 1234
dev = 1337
dev = 9000

asd.
112.
1@#.
12.234

18.335.346
23.235.756
56.863.623

# Agora quero todas as palavras com 3 caracteres no total, que
iniciam tanto com o ou a , tanto faz o caracter do meio, e 
finalizam com a letra a

opa
outra
ata
ola
tola
puxar

Vamos imaginar em um caso de um número de celular, ou qualquer outro padrão onde você quer confirmar uma combinação válida, com o número a seguir:
(23)99255-1231
[(]\d\d[)]\d\d\d\d\d[-]\d\d\d\d

E o número a seguir? Caso você não saiba, o número 55 abaixo,
representa o número identificador do pais. E neste caso 55
representa o número identificador do Brasil. E vamos pensar agora
que o seu programa estará apenas cadastrando clientes nacionais.
Então só será aceito números iniciando com 55, além de estar 
dentro de um padrão número válido. como poderíamos fazer isso?
55(23)99200-8755
45(23)99200-8755
33(23)99200-8755

[5][5][(]\d\d[)]\d\d\d\d\d[-]\d\d\d\d

hey encontrar
tey encontrar
vei encontrar
way pular

[^letra]

(55)1234-1235 encontrar
(62)1234-1235 encontrar
(47)1234-1235 pular
(89)1234-1235 pular

# Em alguns casos você terá que validar valores dentro de uma
faixa, mas para evitar de digitar eles todos individualmente

# Quero todos numeros de 5 a 9
123456789

[5-9]

# quero todas letras entre t a z
abcdefghihklmnopqrstuvwxyz


# Uma sacada legal para casos onde você estará recebendo apenas
para receber letras e números(que não contém acentos latinos) é o
uso do \w que representa todas letras de a a z em maiúscolo ou 
minúsculo e também todos os números de 1 a 0

abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ123456789#$¨&
#@&çóíúá

Encontrando repetições de um padrão mais rapidamente
45-8888-88888
45-5555-88888

# Vamos imaginar que estamos criando um filtro de gírias
aceitáveis dentro da nossa aplicação. Sendo que as únicas
combinações aceitáveis seriam: 'zoeira', 'zueira', 'zuera'. ou
seja, apenas quando a palavra é iniciada com uma das 3 possíveis 
combinações de 3 primeiras letras: zoe, zue

zoeira encontrar
zueira encontrar
zuera encontrar
suera pular

[zueo]{3}



# Outra situação onde você simplesmente quer validar que uma 
quantidade específica de caracteres sejam usados em suas
aplicações você poderia combinar o poder de generalismo do . com
o poder das repetição que as chaves te passam.

# Vamos imaginar que uma senha precisa ter no mínimo 8 caracteres,
independente dos caracteres que foram digitados dentro do campo

12314567
asdfgdfh
*&@%$&$%
G4D%&264
çéç$¨#$#
asdasd
asdasd
123

.{8}

# uma ou mais repetições

# Para todos caracteres e metacaracteres, podemos usar + para
encontrar combinações somente quando houver, nó minímo uma ou 
mais ocorreências. Exemplo:
deev encontrar
ddev encontrar
dddeva encontrar
devi encontrar
eve pular

# Podemos também encontrar combinações onde é iniciado de alguma
forma e o restante pode ser qualquer combinação de caractere
usando o .*

devi encontrar
devo encontrar
devu encontrar
deva encontrar
devi olhar


# Em alguns casos, você estará lidando com caracteres opcionais,
que podem ser encontrados através do metacaracter ?(interrogação)
que representa que um caracter é opcional. Ele te permite 
representar tanto zera ou um do caracter ou grupo precedente. Ex:
dados? irá encontrar tanto "dados" como "dado"

# Porém caso você precise encontrar o ponto de interrogação em
sí, por se tratar de um metacaracter você deve escapar ele \?

# Vamos pensar nas frases abaixo
5 arquivos baixados
1 arquivo baixado
3 arquivos baixados

arquivos? baixados?

# Espaço em branco
# Em diversos cenários onde você está lidando com entrada de
dados de usuário, ou em qualquer aplicação usada no mundo real,
você terá que lidar com espaço em suas aplicações, isso porque o
espaço em branco nos ajuda a deixar textos mais legíveis e nos 
ajuda separar uma palavra da outra, porém se não tiver ciente deste 
espaço em branco em sua espressões regulares, elas podem
simplesmente não funcionar.
    joao

* espaço
* tab(\t)
* nova linha (\n)
* botao enter (\r)
* Para lidar com qualquer tipo de espaço em branco (\s)
1. olá
2.  olá
3.      olá
4.olá

Declarando início e fim
# Para que você crie um regex o mais preciso possível, podemos usar os
delimitadores de início e fim do que deve ser encontrado
# O que é possível através dos ^(chapelzinho) e $(cifrão do dolar)
Hora de codar
Tá na hora de codar
Já chegou a hora de codar

Capturando grupos
# Qualquer padrao encontrado dentro desses parenteses serão colocados em um grupo
que poderá ser utilizado posteriormente, isso pode ser útil para extrair numeros
de telefones ou e-mails por exemplo.

imagem_s121fa.jpg (^imagem.+\.$)
imagem_FFDD.jpg (imagem.+\.)(jpg)
relatorio_agosto.pdf

# Capturar um sub-grupo ((imagem.+\.)(jpg))

amanda@hotmail.com
jeff@outlook.com
carol@gmail.com.br

(\w+)(@\w+\.)(com\.br|com)

(33)99200-1885
([(]\d\d[)])
([(]\d{2}[)])(\d{5})([-]\d{4})
(([(]\d{2}[)])(\d{5})([-]\d{4}))
